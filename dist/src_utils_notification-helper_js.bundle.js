"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkceritaapp"] = self["webpackChunkceritaapp"] || []).push([["src_utils_notification-helper_js"],{

/***/ "./src/utils/notification-helper.js":
/*!******************************************!*\
  !*** ./src/utils/notification-helper.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isCurrentPushSubscriptionAvailable: () => (/* binding */ isCurrentPushSubscriptionAvailable),\n/* harmony export */   subscribe: () => (/* binding */ subscribe),\n/* harmony export */   togglePushNotification: () => (/* binding */ togglePushNotification),\n/* harmony export */   unsubscribe: () => (/* binding */ unsubscribe),\n/* harmony export */   updateSubscriptionButtonText: () => (/* binding */ updateSubscriptionButtonText),\n/* harmony export */   urlBase64ToUint8Array: () => (/* binding */ urlBase64ToUint8Array)\n/* harmony export */ });\n/* harmony import */ var _api_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api/api.js */ \"./src/api/api.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config.js */ \"./src/config.js\");\n\r\n\r\n\r\n// Convert base64 string to Uint8Array\r\nfunction urlBase64ToUint8Array(base64String) {\r\n  try {\r\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n    const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\r\n\r\n    const rawData = window.atob(base64);\r\n    const outputArray = new Uint8Array(rawData.length);\r\n\r\n    for (let i = 0; i < rawData.length; ++i) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n    return outputArray;\r\n  } catch (error) {\r\n    console.error('Error converting base64 to Uint8Array:', error);\r\n    throw new Error('Gagal memproses VAPID key');\r\n  }\r\n}\r\n\r\n// Pastikan service worker terdaftar\r\nasync function registerServiceWorker() {\r\n  if (!('serviceWorker' in navigator)) {\r\n    throw new Error('Service Worker tidak didukung browser ini');\r\n  }\r\n\r\n  try {\r\n    // Coba daftarkan service worker jika belum terdaftar\r\n    const registration = await navigator.serviceWorker.register('/sw.js', {\r\n      scope: '/'\r\n    });\r\n    console.log('Service Worker berhasil didaftarkan:', registration);\r\n    \r\n    // Tunggu hingga service worker aktif\r\n    if (registration.installing) {\r\n      console.log('Service worker sedang diinstall');\r\n      return new Promise((resolve) => {\r\n        registration.installing.addEventListener('statechange', (e) => {\r\n          if (e.target.state === 'activated') {\r\n            console.log('Service worker telah aktif');\r\n            resolve(registration);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    \r\n    return registration;\r\n  } catch (error) {\r\n    console.error('Gagal mendaftarkan Service Worker:', error);\r\n    throw new Error('Gagal mendaftarkan Service Worker: ' + error.message);\r\n  }\r\n}\r\n\r\n// Check if push subscription is available\r\nasync function isCurrentPushSubscriptionAvailable() {\r\n  if (!('serviceWorker' in navigator)) {\r\n    console.error('Service Worker API tidak didukung');\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    // Pastikan service worker sudah ready\r\n    const registration = await navigator.serviceWorker.getRegistration();\r\n    if (!registration) {\r\n      console.error('Service worker tidak terdaftar');\r\n      return false;\r\n    }\r\n\r\n    const subscription = await registration.pushManager.getSubscription();\r\n    return subscription !== null;\r\n  } catch (error) {\r\n    console.error('Error checking subscription:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Fungsi untuk membuat simulasi subscription (untuk demo)\r\nfunction createDummySubscription() {\r\n  // Buat subscription dummy untuk simulasi\r\n  const dummyEndpoint = 'https://fcm.googleapis.com/fcm/send/dummy-endpoint-' + Date.now();\r\n  \r\n  // Simpan endpoint dummy di localStorage untuk digunakan saat unsubscribe\r\n  localStorage.setItem('dummyEndpoint', dummyEndpoint);\r\n  \r\n  return {\r\n    endpoint: dummyEndpoint,\r\n    keys: {\r\n      p256dh: 'BNcUZu3bKdxQYXTgXUPQtCmRKVWLPHX5zHzPsxZNPNYjxpbzDOiidRrNUEHrPbgHxlhIjxQOFDG4CJKuES2qx2E=',\r\n      auth: 'dummyAuthSecret'\r\n    }\r\n  };\r\n}\r\n\r\n// Subscribe to push notifications\r\nasync function subscribe() {\r\n  console.log('Subscribe function called');\r\n  \r\n  // Cek dukungan notifikasi\r\n  if (!('Notification' in window)) {\r\n    console.error('Browser tidak mendukung notifikasi');\r\n    alert('Browser tidak mendukung notifikasi.');\r\n    return false;\r\n  }\r\n\r\n  // Cek dukungan service worker\r\n  if (!('serviceWorker' in navigator)) {\r\n    console.error('Browser tidak mendukung Service Worker');\r\n    alert('Service Worker tidak didukung browser ini.');\r\n    return false;\r\n  }\r\n\r\n  // Cek izin notifikasi\r\n  if (Notification.permission === 'denied') {\r\n    console.error('Izin notifikasi ditolak');\r\n    alert('Izin notifikasi ditolak. Silakan ubah pengaturan browser Anda.');\r\n    return false;\r\n  }\r\n\r\n  try {\r\n    // Minta izin notifikasi jika belum diatur\r\n    if (Notification.permission !== 'granted') {\r\n      console.log('Requesting notification permission...');\r\n      const permission = await Notification.requestPermission();\r\n      if (permission !== 'granted') {\r\n        console.error('Izin notifikasi tidak diberikan');\r\n        alert('Izin notifikasi tidak diberikan.');\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Daftarkan service worker jika belum\r\n    console.log('Registering service worker...');\r\n    let registration;\r\n    try {\r\n      registration = await registerServiceWorker();\r\n      console.log('Service worker is ready:', registration);\r\n    } catch (error) {\r\n      console.error('Error registering service worker:', error);\r\n      // Jika gagal mendaftarkan service worker, gunakan simulasi untuk demo\r\n      alert('Gagal mendaftarkan service worker, menggunakan mode simulasi.');\r\n      \r\n      // Simpan status langganan di localStorage untuk simulasi\r\n      localStorage.setItem('pushSubscribed', 'true');\r\n      \r\n      // Kirim data ke server (simulasi)\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        alert('Anda harus login terlebih dahulu.');\r\n        return false;\r\n      }\r\n      \r\n      // Gunakan subscription dummy\r\n      const dummySubscription = createDummySubscription();\r\n      await (0,_api_api_js__WEBPACK_IMPORTED_MODULE_0__.subscribePushNotification)(token, dummySubscription);\r\n      \r\n      alert('Berhasil berlangganan notifikasi! (Mode Simulasi)');\r\n      return true;\r\n    }\r\n    \r\n    // Cek VAPID_PUBLIC_KEY\r\n    console.log('Checking VAPID_PUBLIC_KEY:', _config_js__WEBPACK_IMPORTED_MODULE_1__.VAPID_PUBLIC_KEY);\r\n    if (!_config_js__WEBPACK_IMPORTED_MODULE_1__.VAPID_PUBLIC_KEY) {\r\n      console.error('VAPID_PUBLIC_KEY tidak tersedia');\r\n      alert('Konfigurasi VAPID key tidak tersedia.');\r\n      return false;\r\n    }\r\n\r\n    // Konversi VAPID key\r\n    console.log('Converting VAPID key to Uint8Array...');\r\n    const applicationServerKey = urlBase64ToUint8Array(_config_js__WEBPACK_IMPORTED_MODULE_1__.VAPID_PUBLIC_KEY);\r\n    \r\n    // Coba subscribe dengan pendekatan sederhana\r\n    console.log('Subscribing to push service...');\r\n    let subscription;\r\n    try {\r\n      subscription = await registration.pushManager.subscribe({\r\n        userVisibleOnly: true,\r\n        applicationServerKey: applicationServerKey\r\n      });\r\n      console.log('Successfully subscribed to push service:', subscription);\r\n    } catch (error) {\r\n      console.error('Error subscribing to push service:', error);\r\n      \r\n      if (error.name === 'NotAllowedError') {\r\n        alert('Izin notifikasi ditolak oleh browser. Periksa pengaturan izin browser Anda.');\r\n      } else if (error.message && error.message.includes('push service')) {\r\n        // Jika gagal karena push service error, gunakan simulasi\r\n        alert('Layanan push tidak tersedia, menggunakan mode simulasi.');\r\n        \r\n        // Simpan status langganan di localStorage untuk simulasi\r\n        localStorage.setItem('pushSubscribed', 'true');\r\n        \r\n        // Kirim data ke server (simulasi)\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n          alert('Anda harus login terlebih dahulu.');\r\n          return false;\r\n        }\r\n        \r\n        // Gunakan subscription dummy\r\n        const dummySubscription = createDummySubscription();\r\n        await (0,_api_api_js__WEBPACK_IMPORTED_MODULE_0__.subscribePushNotification)(token, dummySubscription);\r\n        \r\n        alert('Berhasil berlangganan notifikasi! (Mode Simulasi)');\r\n        return true;\r\n      } else {\r\n        alert(`Gagal berlangganan: ${error.message}`);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    if (!subscription) {\r\n      console.error('Failed to get subscription object');\r\n      alert('Gagal mendapatkan subscription. Coba lagi nanti.');\r\n      return false;\r\n    }\r\n\r\n    // Kirim data ke server\r\n    const token = localStorage.getItem('token');\r\n    console.log('Token available:', !!token);\r\n    \r\n    if (!token) {\r\n      console.error('Token tidak tersedia');\r\n      alert('Anda harus login terlebih dahulu.');\r\n      return false;\r\n    }\r\n\r\n    // Kirim subscription ke server\r\n    console.log('Sending subscription to server...');\r\n    const response = await (0,_api_api_js__WEBPACK_IMPORTED_MODULE_0__.subscribePushNotification)(token, subscription);\r\n    console.log('Server response:', response);\r\n    \r\n    if (response.error) {\r\n      console.error('Server error:', response.message);\r\n      alert(`Server error: ${response.message}`);\r\n      return false;\r\n    }\r\n\r\n    console.log('Successfully subscribed to push notifications');\r\n    alert('Berhasil berlangganan notifikasi!');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error subscribing to push notifications:', error);\r\n    alert(`Gagal berlangganan: ${error.message}`);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Unsubscribe from push notifications\r\nasync function unsubscribe() {\r\n  try {\r\n    // Jika menggunakan mode simulasi, hapus status dari localStorage\r\n    if (localStorage.getItem('pushSubscribed') === 'true') {\r\n      // Kirim permintaan unsubscribe ke server untuk mode simulasi juga\r\n      const token = localStorage.getItem('token');\r\n      if (!token) {\r\n        alert('Anda harus login terlebih dahulu.');\r\n        return false;\r\n      }\r\n      \r\n      // Gunakan endpoint dummy yang disimpan saat subscribe\r\n      const dummyEndpoint = localStorage.getItem('dummyEndpoint') || \r\n                            'https://fcm.googleapis.com/fcm/send/dummy-endpoint-simulation';\r\n      \r\n      console.log('Mengirim permintaan unsubscribe (mode simulasi):', dummyEndpoint);\r\n      // Kirim permintaan unsubscribe ke server\r\n      const response = await (0,_api_api_js__WEBPACK_IMPORTED_MODULE_0__.unsubscribePushNotification)(token, dummyEndpoint);\r\n      console.log('Server response untuk unsubscribe (simulasi):', response);\r\n      \r\n      localStorage.removeItem('pushSubscribed');\r\n      localStorage.removeItem('dummyEndpoint');\r\n      alert('Berhasil berhenti berlangganan notifikasi! (Mode Simulasi)');\r\n      return true;\r\n    }\r\n    \r\n    if (!('serviceWorker' in navigator)) {\r\n      alert('Service Worker tidak didukung browser ini.');\r\n      return false;\r\n    }\r\n\r\n    const registration = await navigator.serviceWorker.getRegistration();\r\n    if (!registration) {\r\n      alert('Service worker belum terdaftar.');\r\n      return false;\r\n    }\r\n    \r\n    const subscription = await registration.pushManager.getSubscription();\r\n    if (!subscription) {\r\n      alert('Anda belum berlangganan notifikasi.');\r\n      return false;\r\n    }\r\n\r\n    // Simpan endpoint sebelum unsubscribe\r\n    const endpoint = subscription.endpoint;\r\n    console.log('Endpoint yang akan dihapus:', endpoint);\r\n    \r\n    // Unsubscribe dari push manager\r\n    const result = await subscription.unsubscribe();\r\n    if (!result) {\r\n      alert('Gagal berhenti berlangganan.');\r\n      return false;\r\n    }\r\n    \r\n    console.log('Berhasil unsubscribe dari push manager');\r\n    \r\n    // Kirim data ke server untuk unsubscribe\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      alert('Anda harus login terlebih dahulu.');\r\n      return false;\r\n    }\r\n    \r\n    console.log('Mengirim permintaan unsubscribe ke server dengan endpoint:', endpoint);\r\n    const response = await (0,_api_api_js__WEBPACK_IMPORTED_MODULE_0__.unsubscribePushNotification)(token, endpoint);\r\n    console.log('Server response untuk unsubscribe:', response);\r\n    \r\n    alert('Berhasil berhenti berlangganan notifikasi!');\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Gagal unsubscribe:', error);\r\n    alert(`Gagal berhenti berlangganan: ${error.message}`);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Fungsi untuk memperbarui teks tombol berdasarkan status langganan\r\nasync function updateSubscriptionButtonText(button) {\r\n  button.disabled = true;\r\n  \r\n  try {\r\n    // Cek mode simulasi terlebih dahulu\r\n    const isSimulationMode = localStorage.getItem('pushSubscribed') === 'true';\r\n    \r\n    // Jika mode simulasi aktif, gunakan status dari localStorage\r\n    if (isSimulationMode) {\r\n      button.textContent = 'Unsubscribe Push Notification';\r\n      button.classList.remove('subscribe');\r\n      button.classList.add('unsubscribe');\r\n      button.disabled = false;\r\n      return;\r\n    }\r\n    \r\n    // Jika bukan mode simulasi, cek status langganan sebenarnya\r\n    const isSubscribed = await isCurrentPushSubscriptionAvailable();\r\n    \r\n    if (isSubscribed) {\r\n      button.textContent = 'Unsubscribe Push Notification';\r\n      button.classList.remove('subscribe');\r\n      button.classList.add('unsubscribe');\r\n    } else {\r\n      button.textContent = 'Subscribe Push Notification';\r\n      button.classList.remove('unsubscribe');\r\n      button.classList.add('subscribe');\r\n    }\r\n  } catch (error) {\r\n    console.error('Error checking subscription status:', error);\r\n    button.textContent = 'Push Notification Error';\r\n  } finally {\r\n    button.disabled = false;\r\n  }\r\n}\r\n\r\n// Fungsi untuk toggle push notification\r\nasync function togglePushNotification(button) {\r\n  button.disabled = true;\r\n  button.textContent = 'Memproses...';\r\n  \r\n  try {\r\n    // Cek mode simulasi terlebih dahulu\r\n    const isSimulationMode = localStorage.getItem('pushSubscribed') === 'true';\r\n    \r\n    // Jika mode simulasi aktif, gunakan status dari localStorage\r\n    if (isSimulationMode) {\r\n      await unsubscribe();\r\n      console.log('Unsubscribed from push notification (simulation mode)');\r\n    } else {\r\n      // Jika bukan mode simulasi, cek status langganan sebenarnya\r\n      const isSubscribed = await isCurrentPushSubscriptionAvailable();\r\n      \r\n      if (isSubscribed) {\r\n        await unsubscribe();\r\n        console.log('Unsubscribed from push notification');\r\n      } else {\r\n        await subscribe();\r\n        console.log('Subscribed to push notification');\r\n      }\r\n    }\r\n    \r\n    // Update teks tombol setelah toggle\r\n    await updateSubscriptionButtonText(button);\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error toggling push notification:', error);\r\n    button.disabled = false;\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Ekspor semua fungsi yang dibutuhkan\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/notification-helper.js\n");

/***/ })

}]);