"use strict";(self.webpackChunkceritaapp=self.webpackChunkceritaapp||[]).push([[405],{82:(t,e,n)=>{n.d(e,{kp:()=>c,gf:()=>i,Lx:()=>o,y_:()=>h,DY:()=>l,WG:()=>s,ht:()=>r});const a="https://story-api.dicoding.dev/v1";function i(){return localStorage.getItem("token")}function s(t){localStorage.setItem("token",t)}function r(t){localStorage.setItem("userName",t)}async function o(t,e){return await async function(t,e){const n=await fetch(`${a}/login`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:t,password:e})});return await n.json()}(t,e)}async function l(t,e,n){return await async function(t,e,n){const i=await fetch(`${a}/register`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:t,email:e,password:n})});return await i.json()}(t,e,n)}async function c(t,e=1,n=10,i=0){return await async function(t,e=1,n=10,i=0){const s=new URL(`${a}/stories`);s.searchParams.set("page",e),s.searchParams.set("size",n),s.searchParams.set("location",i);const r=await fetch(s.toString(),{headers:{Authorization:`Bearer ${t}`}});return await r.json()}(t,e,n,i)}async function h(t,e,n,i,s){return await async function(t,e,n,i=null,s=null){const r=new FormData;r.append("description",e),r.append("photo",n),null!==i&&r.append("lat",i),null!==s&&r.append("lon",s);const o=await fetch(`${a}/stories`,{method:"POST",headers:{Authorization:`Bearer ${t}`},body:r});return await o.json()}(t,e,n,i,s)}},405:(t,e,n)=>{n.r(e),n.d(e,{default:()=>o});class a{constructor(t){this.container=t,this.onSubmit=null,this.onCancel=null,this.onAlert=null}render(){this.container.innerHTML='\n      <h2>Register</h2>\n      <form id="registerForm" class="story-form" novalidate>\n        <div class="form-control">\n          <label for="name">Nama Lengkap:</label>\n          <input type="text" id="name" name="name" placeholder="Masukkan nama lengkap" required />\n        </div>\n        <div class="form-control">\n          <label for="email">Email:</label>\n          <input type="email" id="email" name="email" placeholder="Masukkan email" required />\n        </div>\n        <div class="form-control">\n          <label for="password">Password:</label>\n          <input type="password" id="password" name="password" placeholder="Minimal 8 karakter" required minlength="8" />\n        </div>\n        <div class="form-buttons" style="margin-top: 20px;">\n          <button class="btn" type="submit">Daftar</button>\n          <button type="button" id="cancel-button" class="btn btn-outline">Batal</button>\n        </div>\n      </form>\n    ',this.#t()}#t(){const t=this.container.querySelector("#registerForm"),e=this.container.querySelector("#cancel-button");t.addEventListener("submit",(e=>{if(e.preventDefault(),!t.checkValidity())return void t.reportValidity();const n=t.elements.name.value.trim(),a=t.elements.email.value.trim(),i=t.elements.password.value;this.onSubmit&&this.onSubmit(n,a,i)})),e.addEventListener("click",(()=>{this.onCancel&&this.onCancel()}))}showError(t){this.onAlert?.(t)}showSuccess(t){this.onAlert?.(t)}}var i=n(82),s=n(885);class r{constructor(t){this.view=t,this.view.onSubmit=this.handleRegister.bind(this),this.view.onCancel=this.handleCancel.bind(this),this.view.onAlert=this.handleAlert.bind(this)}handleAlert(t){alert(t)}async handleRegister(t,e,n){try{const a=await i.DY(t,e,n);a.error?this.view.showError(`Registrasi gagal: ${a.message}`):(this.view.showSuccess("Registrasi berhasil! Silakan login."),await(0,s.V)("#login"))}catch(t){console.error("Register error:",t),this.view.showError("Terjadi kesalahan saat registrasi, coba lagi.")}}async handleCancel(){await(0,s.V)("#home")}}function o(t){const e=new a(t);new r(e),e.render()}}}]);
//# sourceMappingURL=405.8132908f0e53d6e1cdfd.bundle.js.map