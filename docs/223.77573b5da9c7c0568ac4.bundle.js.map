{"version":3,"file":"223.77573b5da9c7c0568ac4.bundle.js","mappings":"2KAAA,MAAMA,EAAW,oCCEV,SAASC,IACd,OAAOC,aAAaC,QAAQ,QAC9B,CAEO,SAASC,EAASC,GACvBH,aAAaI,QAAQ,QAASD,EAChC,CAUO,SAASE,EAAYC,GAC1BN,aAAaI,QAAQ,WAAYE,EACnC,CAEOC,eAAe,EAAUC,EAAOC,GACrC,aDZKF,eAAyBC,EAAOC,GACrC,MAAMC,QAAYC,MAAM,GAAGb,UAAkB,CAC3Cc,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CAAER,QAAOC,eAEhC,aAAaC,EAAIO,MACnB,CCKe,CAAcT,EAAOC,EACpC,CAEOF,eAAe,EAAaD,EAAME,EAAOC,GAC9C,aDzBKF,eAA4BD,EAAME,EAAOC,GAC9C,MAAMC,QAAYC,MAAM,GAAGb,aAAqB,CAC9Cc,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CAAEV,OAAME,QAAOC,eAEtC,aAAaC,EAAIO,MACnB,CCkBe,CAAiBX,EAAME,EAAOC,EAC7C,CAEOF,eAAe,EAAaJ,EAAOe,EAAO,EAAGC,EAAO,GAAIC,EAAW,GACxE,aDXKb,eAA4BJ,EAAOe,EAAO,EAAGC,EAAO,GAAIC,EAAW,GACxE,MAAMC,EAAM,IAAIC,IAAI,GAAGxB,aACvBuB,EAAIE,aAAaC,IAAI,OAAQN,GAC7BG,EAAIE,aAAaC,IAAI,OAAQL,GAC7BE,EAAIE,aAAaC,IAAI,WAAYJ,GAEjC,MAAMV,QAAYC,MAAMU,EAAII,WAAY,CACtCZ,QAAS,CACPa,cAAe,UAAUvB,OAG7B,aAAaO,EAAIO,MACnB,CCDe,CAAiBd,EAAOe,EAAMC,EAAMC,EACnD,CAEOb,eAAeoB,EAAUxB,EAAOyB,EAAaC,EAAWC,EAAKC,GAClE,aDDKxB,eAAwBJ,EAAOyB,EAAaC,EAAWC,EAAM,KAAMC,EAAM,MAC9E,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,cAAeN,GAC/BI,EAASE,OAAO,QAASL,GACb,OAARC,GAAcE,EAASE,OAAO,MAAOJ,GAC7B,OAARC,GAAcC,EAASE,OAAO,MAAOH,GAEzC,MAAMrB,QAAYC,MAAM,GAAGb,YAAoB,CAC7Cc,OAAQ,OACRC,QAAS,CACPa,cAAe,UAAUvB,KAE3BW,KAAMkB,IAER,aAAatB,EAAIO,MACnB,CCde,CAAad,EAAOyB,EAAaC,EAAWC,EAAKC,EAChE,C,mFC/BA,MAAMI,EAAe,SAAO,CAC1BC,QAAS,gCACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,MAGpB,IAAIC,EAAc,KACdC,EAAqB,K,aCVzB,MAEMC,EAAoB,UAEpBC,GAAY,QAJI,gBACG,EAGiC,CACxD,OAAAC,CAAQC,GACDA,EAAGC,iBAAiBC,SAASL,IAChCG,EAAGG,kBAAkBN,EAAmB,CAAEO,QAAS,MAEvD,IAIW,EAAgB1C,MAAO2C,IAClC,MAAML,QAAWF,EAQjB,OAPAQ,QAAQC,IAAI,iCAAkCF,GAGzCA,EAAMG,KACTH,EAAMG,GAAKC,KAAKC,OAGXV,EAAGW,IAAId,EAAmBQ,IAItBO,EAAmBlD,UAC9B,MAAMsC,QAAWF,EACXe,QAAgBb,EAAGc,OAAOjB,GAEhC,OADAS,QAAQC,IAAI,sCAAuCM,GAC5CA,GC1BM,MAAME,EACnB,WAAAC,CAAYC,GACVC,KAAKD,UAAYA,CACnB,CAGA,UAAME,SACED,KAAKE,6BACLF,MAAK,GACb,CAGA,0BAAME,GACJ,MAAM9D,EAAQ,OAGd,GAFAgD,QAAQC,IAAI,SAAUjD,GAEjBA,EAAL,CAKA4D,KAAKD,UAAUI,UAAY,sBAE3B,IACE,IAAIR,QAAgBD,IACpB,GAAIC,EAAQS,OAAS,EACnBJ,KAAKK,cAAcV,OACd,CACL,MAAMW,QAAe,KAAmBlE,EAAO,EAAG,GAAI,GAEtD,IAAKkE,IAAWA,EAAOC,WAAyC,IAA5BD,EAAOC,UAAUH,OAEnD,YADAJ,KAAKD,UAAUI,UAAY,gEAI7BG,EAAOC,UAAUC,SAAQrB,GAAS,EAAcA,KAChDa,KAAKK,cAAcC,EAAOC,UAC5B,CACF,CAAE,MAAOE,GACPT,KAAKD,UAAUI,UAAY,4CAA4CM,EAAMC,cAC7EtB,QAAQqB,MAAMA,EAChB,CAtBA,MAFET,KAAKD,UAAUI,UAAY,+DAyB/B,CAGA,aAAAE,CAAcV,GACZ,MAAMgB,EAAQhB,EACXiB,KAAKzB,GCrDL,SAAyBA,GAC9B,MAAM0B,EAAQ1B,EAAM2B,UAAY,gCAC1BC,EAAO5B,EAAM6B,UACf,IAAIzB,KAAKJ,EAAM6B,WAAWC,qBAC1B,yBAEEC,GAA0B,IAAhB/B,EAAMgC,MAEtB,MAAO,uDAC2ChC,EAAMG,yBACxCuB,8BAAkC1B,EAAM5C,MAAQ,2BACtD4C,EAAM5C,MAAQ,2BACf4C,EAAMtB,aAAe,4BACdkD,0DACwB5B,EAAMG,OAAO4B,EAAU,WAAa,gBACpEA,EAAU,YAAc,oCAE1BA,EAAU,uCAAuC/B,EAAMG,qBAAuB,oBAGtF,CDiCsB8B,CAAgBjC,KAC/BkC,KAAK,IAERrB,KAAKD,UAAUI,UAAY,qUAOCQ,gQCpCzB,SAAyCW,EAAwBC,GACtE,MAAMC,EAAcC,SAASC,iBAAiB,aACxCC,EAAgBF,SAASC,iBAAiB,eAGhDF,EAAYhB,SAASoB,IACnB,MAAMC,EAAUD,EAAIE,aAAa,WAC7BD,GAA6C,mBAA3BP,GACpBM,EAAIG,iBAAiB,SAAS,KAC5BT,EAAuBO,SAM7BF,EAAcnB,SAASoB,IACrB,MAAMC,EAAUD,EAAIE,aAAa,WAC7BD,GAA4C,mBAA1BN,GACpBK,EAAIG,iBAAiB,SAAS,KAC5BR,EAAsBM,QAI9B,CDqBIG,CAAgChC,KAAKiC,mBAAmBC,KAAKlC,MAAOA,KAAKmC,YAAYD,KAAKlC,OFzDvF,SAA4BL,GAC7BlB,IACFA,EAAY2D,SACZ3D,EAAc,KACdC,EAAqB,MAGvBD,EAAc,QAAM,OAAO4D,QAAQ,EAAE,IAAK,OAAQ,GAElD,cAAY,qDAAsD,CAChEC,YAAa,iCACZC,MAAM9D,GAETC,EAAqB,yBAErBiB,EAAQa,SAAQrB,IACd,GAAkB,OAAdA,EAAMpB,KAA8B,OAAdoB,EAAMnB,IAAc,CAC5C,MAAMwE,EAAS,WAAS,CAACrD,EAAMpB,IAAKoB,EAAMnB,KAAM,CAAEyE,KAAMrE,IACxDoE,EAAOE,UAAU,qBACLvD,EAAM5C,MAAQ,kCACtB4C,EAAMtB,aAAe,eAEzBa,EAAmBiE,SAASH,EAC9B,KAGF/D,EAAYkE,SAASjE,EACvB,CE+BIkE,CAAmBjD,EACrB,CAGA,OAAM,GACJ,MAAMiC,EAAM5B,KAAKD,UAAU8C,cAAc,oBACzC,IAAKjB,EAAK,OAKV,IAHc,OAMZ,OAFAA,EAAIkB,YAAc,yCAClBlB,EAAImB,UAAW,GAKjB,MAAMC,QE3EHxG,iBACL,KAAM,kBAAmByG,WAAY,OAAO,EAE5C,MAAMC,QAAqBD,UAAUE,cAAcC,kBACnD,QAAKF,GAGmB,aADGA,EAAaG,YAAYC,iBAEtD,CFmE6BC,GAGzB3B,EAAIkB,YAAcE,EAAa,gCAAkC,8BACjEpB,EAAImB,UAAW,EAGfnB,EAAI4B,QAAUhH,UACZoF,EAAImB,UAAW,EAEf,IACMC,SEzCLxG,iBACL,MAAM0G,QAAqBD,UAAUE,cAAcC,kBACnD,IAAKF,EAEH,YADAO,MAAM,mCAIR,MAAMC,QAAqBR,EAAaG,YAAYC,kBACpD,GAAKI,EAKL,UACQA,EAAaC,cACnBvE,QAAQC,IAAI,uBACd,CAAE,MAAOoB,GACPrB,QAAQqB,MAAM,qBAAsBA,GACpCgD,MAAM,iDACR,MAVEA,MAAM,sCAWV,CFsBgBE,GACNF,MAAM,sDE7ETjH,iBACL,KAAM,iBAAkBoH,QAEtB,YADAH,MAAM,uCAIR,IAAII,EAAaC,aAAaD,WAI9B,GAHmB,YAAfA,IACFA,QAAmBC,aAAaC,qBAEf,YAAfF,EAEF,YADAJ,MAAM,oCAIR,MAAMP,QAAqBD,UAAUE,cAAcC,kBACnD,GAAKF,EAKL,IACE,MAAMQ,QAAqBR,EAAaG,YAAYW,UAAU,CAC5DC,iBAAiB,EACjBC,qBAAsB,0BAGxB9E,QAAQC,IAAI,wCAAyCqE,EACvD,CAAE,MAAOjD,GACPrB,QAAQqB,MAAM,mBAAoBA,GAClCgD,MAAM,wCACR,MAdEA,MAAM,kCAeV,CF+CgBO,GACNP,MAAM,4CAEV,CAAE,MAAOU,GACPV,MAAM,wCACNrE,QAAQqB,MAAM0D,EAChB,OAGMnE,MAAK,IAEf,CAGA,wBAAMiC,CAAmBJ,GACvB,MACM1C,SADgBO,KACA0E,MAAKC,GAAMA,EAAG/E,KAAOuC,IAEvC1C,IACFA,EAAMgC,OAAQ,QACR,EAAchC,GACpBsE,MAAM,+CACAzD,KAAKE,uBAEf,CAGA,iBAAMiC,CAAYN,QDhGarF,OAAOqF,UACrBjD,GACP0F,OAAO3F,EAAmBkD,GC+F5B0C,CAAkB1C,GACxB4B,MAAM,kCACAzD,KAAKE,sBACb,EGvIa1D,eAAegI,EAAKzE,GACjC,MAAM0E,EAAY,IAAI5E,EAAcE,SAC9B0E,EAAUxE,MAClB,C","sources":["webpack://ceritaapp/./src/api/api.js","webpack://ceritaapp/./src/model/storyModel.js","webpack://ceritaapp/./src/utils/map.js","webpack://ceritaapp/./src/utils/database.js","webpack://ceritaapp/./src/presenter/homePresenter.js","webpack://ceritaapp/./src/presenter/storyPresenter.js","webpack://ceritaapp/./src/utils/notification-helper.js","webpack://ceritaapp/./src/views/home.js"],"sourcesContent":["const BASE_URL = 'https://story-api.dicoding.dev/v1';\r\n\r\nexport async function registerUser(name, email, password) {\r\n  const res = await fetch(`${BASE_URL}/register`, {\r\n    method: 'POST',\r\n    headers: {'Content-Type': 'application/json'},\r\n    body: JSON.stringify({ name, email, password }),\r\n  });\r\n  return await res.json();\r\n}\r\n\r\nexport async function loginUser(email, password) {\r\n  const res = await fetch(`${BASE_URL}/login`, {\r\n    method: 'POST',\r\n    headers: {'Content-Type': 'application/json'},\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n  return await res.json();\r\n}\r\n\r\nexport async function fetchStories(token, page = 1, size = 10, location = 0) {\r\n  const url = new URL(`${BASE_URL}/stories`);\r\n  url.searchParams.set('page', page);\r\n  url.searchParams.set('size', size);\r\n  url.searchParams.set('location', location);\r\n\r\n  const res = await fetch(url.toString(), {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n  });\r\n  return await res.json();\r\n}\r\n\r\nexport async function addStory(token, description, photoFile, lat = null, lon = null) {\r\n  const formData = new FormData();\r\n  formData.append('description', description);\r\n  formData.append('photo', photoFile);\r\n  if (lat !== null) formData.append('lat', lat);\r\n  if (lon !== null) formData.append('lon', lon);\r\n\r\n  const res = await fetch(`${BASE_URL}/stories`, {\r\n    method: 'POST',\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: formData,\r\n  });\r\n  return await res.json();\r\n}\r\n\r\nexport async function addStoryGuest(description, photoFile, lat = null, lon = null) {\r\n  const formData = new FormData();\r\n  formData.append('description', description);\r\n  formData.append('photo', photoFile);\r\n  if (lat !== null) formData.append('lat', lat);\r\n  if (lon !== null) formData.append('lon', lon);\r\n\r\n  const res = await fetch(`${BASE_URL}/stories/guest`, {\r\n    method: 'POST',\r\n    body: formData,\r\n  });\r\n  return await res.json();\r\n}\r\n\r\nexport async function subscribePushNotification(token, subscription) {\r\n  // Kirim hanya bagian penting subscription ke server\r\n  const filteredSubscription = {\r\n    endpoint: subscription.endpoint,\r\n    keys: {\r\n      p256dh: subscription.keys.p256dh,\r\n      auth: subscription.keys.auth,\r\n    },\r\n  };\r\n\r\n  const res = await fetch(`${BASE_URL}/notifications/subscribe`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify(filteredSubscription),\r\n  });\r\n  return await res.json();\r\n}\r\n\r\nexport async function unsubscribePushNotification(token, endpoint) {\r\n  const res = await fetch(`${BASE_URL}/notifications/subscribe`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({ endpoint }),\r\n  });\r\n  return await res.json();\r\n}\r\n\r\nexport async function sendNotification(reportId, token) {\r\n  const res = await fetch(`${BASE_URL}/notifications/send`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    },\r\n    body: JSON.stringify({ reportId }),\r\n  });\r\n  return await res.json();\r\n}","import * as api from '../api/api.js';\r\n\r\nexport function getToken() {\r\n  return localStorage.getItem('token');\r\n}\r\n\r\nexport function setToken(token) {\r\n  localStorage.setItem('token', token);\r\n}\r\n\r\nexport function removeToken() {\r\n  localStorage.removeItem('token');\r\n}\r\n\r\nexport function getUserName() {\r\n  return localStorage.getItem('userName');\r\n}\r\n\r\nexport function setUserName(name) {\r\n  localStorage.setItem('userName', name);\r\n}\r\n\r\nexport async function loginUser(email, password) {\r\n  return await api.loginUser(email, password);\r\n}\r\n\r\nexport async function registerUser(name, email, password) {\r\n  return await api.registerUser(name, email, password);\r\n}\r\n\r\nexport async function fetchStories(token, page = 1, size = 10, location = 0) {\r\n  return await api.fetchStories(token, page, size, location);\r\n}\r\n\r\nexport async function postStory(token, description, photoFile, lat, lon) {\r\n  return await api.addStory(token, description, photoFile, lat, lon);\r\n}\r\n\r\nexport async function subscribePushNotification(token, subscription) {\r\n  return await api.subscribePushNotification(token, subscription);\r\n}\r\n\r\nexport async function unsubscribePushNotification(token, endpoint) {\r\n  return await api.unsubscribePushNotification(token, endpoint);\r\n}\r\n","import L from 'leaflet';\r\nimport 'leaflet.markercluster';  // cukup import ini saja\r\nimport 'leaflet.markercluster/dist/MarkerCluster.css';\r\nimport 'leaflet.markercluster/dist/MarkerCluster.Default.css';\r\n\r\nconst locationIcon = L.icon({\r\n  iconUrl: '/assets/place_24dp_5985E1.png',\r\n  iconSize: [32, 32],\r\n  iconAnchor: [16, 32],\r\n  popupAnchor: [0, -32],\r\n});\r\n\r\nlet mapInstance = null;\r\nlet markerClusterGroup = null;\r\n\r\nexport function initMapWithStories(stories) {\r\n  if (mapInstance) {\r\n    mapInstance.remove();\r\n    mapInstance = null;\r\n    markerClusterGroup = null;\r\n  }\r\n\r\n  mapInstance = L.map('map').setView([-2.5, 117.5], 5);\r\n\r\n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n    attribution: '© OpenStreetMap contributors',\r\n  }).addTo(mapInstance);\r\n\r\n  markerClusterGroup = L.markerClusterGroup();\r\n\r\n  stories.forEach(story => {\r\n    if (story.lat !== null && story.lon !== null) {\r\n      const marker = L.marker([story.lat, story.lon], { icon: locationIcon });\r\n      marker.bindPopup(`\r\n        <strong>${story.name || 'Anonim'}</strong><br>\r\n        ${story.description || '-'}\r\n      `);\r\n      markerClusterGroup.addLayer(marker);\r\n    }\r\n  });\r\n\r\n  mapInstance.addLayer(markerClusterGroup);\r\n}\r\n\r\nexport function initLocationPicker() {\r\n  if (mapInstance) {\r\n    mapInstance.remove();\r\n    mapInstance = null;\r\n  }\r\n\r\n  const defaultLatLng = [-2.5, 117.5];\r\n  mapInstance = L.map('map').setView(defaultLatLng, 5);\r\n\r\n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n    attribution: '© OpenStreetMap contributors',\r\n  }).addTo(mapInstance);\r\n\r\n  let locationPickerMarker = null;\r\n\r\n  mapInstance.on('click', function (e) {\r\n    const { lat, lng } = e.latlng;\r\n\r\n    if (locationPickerMarker) {\r\n      locationPickerMarker.setLatLng(e.latlng);\r\n    } else {\r\n      locationPickerMarker = L.marker(e.latlng, { icon: locationIcon }).addTo(mapInstance);\r\n    }\r\n\r\n    window.selectedLocation = { lat, lon: lng };\r\n  });\r\n}\r\n\r\nexport function removeMap() {\r\n  if (mapInstance) {\r\n    mapInstance.remove();\r\n    mapInstance = null;\r\n    markerClusterGroup = null;\r\n  }\r\n}\r\n","// src/utils/database.js\r\nimport { openDB } from 'idb';  // Untuk IndexedDB\r\n\r\nconst DATABASE_NAME = 'storyshare-db';\r\nconst DATABASE_VERSION = 1;\r\nconst OBJECT_STORE_NAME = 'stories';\r\n\r\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n  upgrade(db) {\r\n    if (!db.objectStoreNames.contains(OBJECT_STORE_NAME)) {\r\n      db.createObjectStore(OBJECT_STORE_NAME, { keyPath: 'id' }); // Menggunakan 'id' sebagai keyPath\r\n    }\r\n  },\r\n});\r\n\r\n// Menyimpan cerita ke IndexedDB\r\nexport const saveStoryToDB = async (story) => {\r\n  const db = await dbPromise;\r\n  console.log('Menyimpan cerita ke IndexedDB:', story); // Debugging log\r\n  \r\n  // Pastikan cerita memiliki id, jika tidak buat id\r\n  if (!story.id) {\r\n    story.id = Date.now(); // Membuat id unik jika tidak ada\r\n  }\r\n  \r\n  return db.put(OBJECT_STORE_NAME, story); // Simpan cerita\r\n};\r\n\r\n// Mengambil cerita dari IndexedDB\r\nexport const getStoriesFromDB = async () => {\r\n  const db = await dbPromise;\r\n  const stories = await db.getAll(OBJECT_STORE_NAME);\r\n  console.log('Cerita yang diambil dari IndexedDB:', stories);  // Debugging log\r\n  return stories;\r\n};\r\n\r\n// Menghapus cerita dari IndexedDB\r\nexport const deleteStoryFromDB = async (storyId) => {\r\n  const db = await dbPromise;\r\n  return db.delete(OBJECT_STORE_NAME, storyId);\r\n};\r\n","// src/presenter/homePresenter.js\r\nimport * as model from '../model/storyModel.js';\r\nimport { initMapWithStories } from '../utils/map.js';\r\nimport { createStoryCard, bindSaveButtonsAndDeleteButtons } from './storyPresenter.js';\r\nimport { saveStoryToDB, getStoriesFromDB, deleteStoryFromDB } from '../utils/database.js';\r\nimport { subscribe, unsubscribe, isCurrentPushSubscriptionAvailable } from '../utils/notification-helper.js';\r\n\r\nexport default class HomePresenter {\r\n  constructor(container) {\r\n    this.container = container;\r\n  }\r\n\r\n  // Memastikan init dipanggil untuk memulai\r\n  async init() {\r\n    await this.loadAndRenderStories();  // Fungsi untuk menampilkan semua cerita\r\n    await this.#setupPushNotificationButton();  // Memanggil setup tombol subscribe/unsubscribe\r\n  }\r\n\r\n  // Fungsi untuk memuat semua cerita\r\n  async loadAndRenderStories() {\r\n    const token = model.getToken();\r\n    console.log(\"Token:\", token);\r\n\r\n    if (!token) {\r\n      this.container.innerHTML = '<p>Anda harus login terlebih dahulu untuk melihat cerita.</p>';\r\n      return;\r\n    }\r\n\r\n    this.container.innerHTML = '<h2>Loading...</h2>';\r\n\r\n    try {\r\n      let stories = await getStoriesFromDB();\r\n      if (stories.length > 0) {\r\n        this.renderStories(stories);\r\n      } else {\r\n        const result = await model.fetchStories(token, 1, 10, 1);\r\n\r\n        if (!result || !result.listStory || result.listStory.length === 0) {\r\n          this.container.innerHTML = `<p>Gagal memuat cerita: Tidak ada cerita yang ditemukan.</p>`;\r\n          return;\r\n        }\r\n\r\n        result.listStory.forEach(story => saveStoryToDB(story));\r\n        this.renderStories(result.listStory);\r\n      }\r\n    } catch (error) {\r\n      this.container.innerHTML = `<p>Terjadi kesalahan saat memuat cerita: ${error.message}</p>`;\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  // Render stories di halaman\r\n  renderStories(stories) {\r\n    const cards = stories\r\n      .map((story) => createStoryCard(story))\r\n      .join('');\r\n\r\n    this.container.innerHTML = `\r\n      <section style=\"text-align: center; margin-bottom: 24px;\">\r\n        <h2>Selamat Datang di StoryShare App!</h2>\r\n        <p>Bagikan kisah unik dan pengalaman Anda ...</p>\r\n      </section>\r\n\r\n      <h2 style=\"text-align: center; font-size: 28px; font-weight: 700;\">Daftar Cerita</h2>\r\n      <div class=\"story-list\">${cards}</div>\r\n      <div id=\"map\" style=\"height: 400px; margin-top: 20px;\"></div>\r\n      <div id=\"notification-container\" style=\"text-align: center; margin-top: 20px;\">\r\n        <button id=\"btn-push-toggle\" class=\"btn\">Loading...</button>\r\n      </div>\r\n    `;\r\n\r\n    // Bind tombol simpan dan hapus setelah cerita dirender\r\n    bindSaveButtonsAndDeleteButtons(this.handleSaveBookmark.bind(this), this.deleteStory.bind(this));\r\n    initMapWithStories(stories);\r\n  }\r\n\r\n  // Setup tombol subscribe/unsubscribe push notification\r\n  async #setupPushNotificationButton() {\r\n    const btn = this.container.querySelector('#btn-push-toggle');\r\n    if (!btn) return;\r\n\r\n    const token = model.getToken(); // Pastikan token ada\r\n\r\n    // Jika token tidak ada, tombol akan dinonaktifkan\r\n    if (!token) {\r\n      btn.textContent = 'Anda harus login untuk notifikasi';\r\n      btn.disabled = true;\r\n      return;\r\n    }\r\n\r\n    // Cek status langganan push notification\r\n    const subscribed = await isCurrentPushSubscriptionAvailable();\r\n\r\n    // Ubah teks tombol berdasarkan status langganan\r\n    btn.textContent = subscribed ? 'Unsubscribe Push Notification' : 'Subscribe Push Notification';\r\n    btn.disabled = false;\r\n\r\n    // Tangani klik tombol untuk subscribe atau unsubscribe\r\n    btn.onclick = async () => {\r\n      btn.disabled = true;  // Nonaktifkan tombol sementara\r\n\r\n      try {\r\n        if (subscribed) {\r\n          await unsubscribe();  // Unsubscribe\r\n          alert('Berhasil berhenti berlangganan notifikasi!');\r\n        } else {\r\n          await subscribe();  // Subscribe\r\n          alert('Berhasil berlangganan push notification!');\r\n        }\r\n      } catch (err) {\r\n        alert('Gagal mengubah langganan notifikasi.');\r\n        console.error(err);\r\n      }\r\n\r\n      // Perbarui tombol setelah aksi\r\n      await this.#setupPushNotificationButton();\r\n    };\r\n  }\r\n\r\n  // Menambahkan cerita ke bookmark\r\n  async handleSaveBookmark(storyId) {\r\n    const stories = await getStoriesFromDB();\r\n    const story = stories.find(st => st.id === storyId);\r\n\r\n    if (story) {\r\n      story.saved = true;  // Tandai cerita sebagai disimpan\r\n      await saveStoryToDB(story);  // Simpan kembali ke IndexedDB dengan status 'saved'\r\n      alert('Cerita berhasil disimpan ke bookmark!');\r\n      await this.loadAndRenderStories();  // Perbarui tampilan daftar cerita\r\n    }\r\n  }\r\n\r\n  // Menghapus cerita dari database dan memperbarui tampilan\r\n  async deleteStory(storyId) {\r\n    await deleteStoryFromDB(storyId);  // Hapus cerita dari IndexedDB\r\n    alert('Cerita berhasil dihapus!');\r\n    await this.loadAndRenderStories();  // Perbarui tampilan daftar cerita setelah dihapus\r\n  }\r\n}\r\n","// src/presenter/storyPresenter.js\r\nexport function createStoryCard(story) {\r\n  const photo = story.photoUrl || '/assets/place_24dp_5985E1.png';\r\n  const date = story.createdAt\r\n    ? new Date(story.createdAt).toLocaleDateString()\r\n    : 'Tanggal tidak tersedia';\r\n\r\n  const isSaved = story.saved === true;\r\n\r\n  return `\r\n    <div class=\"story-card\" tabindex=\"0\" data-id=\"${story.id}\">\r\n      <img src=\"${photo}\" alt=\"Gambar cerita oleh ${story.name || 'Anonim'}\" />\r\n      <h3>${story.name || 'Anonim'}</h3>\r\n      <p>${story.description || '-'}</p>\r\n      <p><small>${date}</small></p>\r\n      <button class=\"save-btn\" data-id=\"${story.id}\" ${isSaved ? 'disabled' : ''}>\r\n        ${isSaved ? 'Tersimpan' : 'Simpan'}\r\n      </button>\r\n      ${isSaved ? `<button class=\"delete-btn\" data-id=\"${story.id}\">Hapus</button>` : ''}\r\n    </div>\r\n  `;\r\n}\r\n\r\n/**\r\n * Attach listener ke tombol simpan dan hapus setelah kartu dirender\r\n * @param {Function} onSaveBookmarkCallback - callback ketika tombol simpan diklik\r\n * @param {Function} onDeleteStoryCallback - callback ketika tombol hapus diklik\r\n */\r\nexport function bindSaveButtonsAndDeleteButtons(onSaveBookmarkCallback, onDeleteStoryCallback) {\r\n  const saveButtons = document.querySelectorAll('.save-btn');\r\n  const deleteButtons = document.querySelectorAll('.delete-btn');\r\n\r\n  // Mengikat event listener untuk tombol simpan\r\n  saveButtons.forEach((btn) => {\r\n    const storyId = btn.getAttribute('data-id');\r\n    if (storyId && typeof onSaveBookmarkCallback === 'function') {\r\n      btn.addEventListener('click', () => {\r\n        onSaveBookmarkCallback(storyId);\r\n      });\r\n    }\r\n  });\r\n\r\n  // Mengikat event listener untuk tombol hapus\r\n  deleteButtons.forEach((btn) => {\r\n    const storyId = btn.getAttribute('data-id');\r\n    if (storyId && typeof onDeleteStoryCallback === 'function') {\r\n      btn.addEventListener('click', () => {\r\n        onDeleteStoryCallback(storyId);\r\n      });\r\n    }\r\n  });\r\n}\r\n","import { subscribePushNotification, unsubscribePushNotification } from '../api/api.js';\r\nimport { VAPID_PUBLIC_KEY } from '../config.js';\r\n\r\nexport function urlBase64ToUint8Array(base64String) {\r\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\r\n\r\n  const rawData = window.atob(base64);\r\n  const outputArray = new Uint8Array(rawData.length);\r\n\r\n  for (let i = 0; i < rawData.length; ++i) {\r\n    outputArray[i] = rawData.charCodeAt(i);\r\n  }\r\n  return outputArray;\r\n}\r\n\r\nexport async function isCurrentPushSubscriptionAvailable() {\r\n  if (!('serviceWorker' in navigator)) return false;\r\n\r\n  const registration = await navigator.serviceWorker.getRegistration();\r\n  if (!registration) return false;\r\n\r\n  const subscription = await registration.pushManager.getSubscription();\r\n  return subscription !== null;\r\n}\r\n\r\n// src/utils/notification-helper.js\r\nexport async function subscribe() {\r\n  if (!('Notification' in window)) {\r\n    alert('Browser tidak mendukung notifikasi.');\r\n    return;\r\n  }\r\n\r\n  let permission = Notification.permission;\r\n  if (permission === 'default') {\r\n    permission = await Notification.requestPermission();\r\n  }\r\n  if (permission !== 'granted') {\r\n    alert('Izin notifikasi tidak diberikan.');\r\n    return;\r\n  }\r\n\r\n  const registration = await navigator.serviceWorker.getRegistration();\r\n  if (!registration) {\r\n    alert('Service Worker belum terdaftar.');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const subscription = await registration.pushManager.subscribe({\r\n      userVisibleOnly: true,\r\n      applicationServerKey: 'your-vapid-public-key', // Ganti dengan kunci Anda\r\n    });\r\n\r\n    console.log('Berhasil subscribe push notification:', subscription);\r\n  } catch (error) {\r\n    console.error('Gagal subscribe:', error);\r\n    alert('Gagal berlangganan push notification.');\r\n  }\r\n}\r\n\r\nexport async function unsubscribe() {\r\n  const registration = await navigator.serviceWorker.getRegistration();\r\n  if (!registration) {\r\n    alert('Service Worker belum terdaftar.');\r\n    return;\r\n  }\r\n\r\n  const subscription = await registration.pushManager.getSubscription();\r\n  if (!subscription) {\r\n    alert('Anda belum berlangganan notifikasi.');\r\n    return;\r\n  }\r\n\r\n  try {\r\n    await subscription.unsubscribe();\r\n    console.log('Berhasil unsubscribe');\r\n  } catch (error) {\r\n    console.error('Gagal unsubscribe:', error);\r\n    alert('Gagal berhenti berlangganan push notification.');\r\n  }\r\n}\r\n","import HomePresenter from '../presenter/homePresenter.js';\r\n\r\nexport default async function home(container) {\r\n  const presenter = new HomePresenter(container);\r\n  await presenter.init();\r\n}\r\n\r\n// Misalnya, menambahkan tombol simpan di sini\r\nfunction renderStory(story) {\r\n  return `\r\n    <div class=\"story-card\" data-id=\"${story.id}\">\r\n      <img src=\"${story.photoUrl || '/assets/default.png'}\" alt=\"${story.name}\">\r\n      <h3>${story.name}</h3>\r\n      <p>${story.description}</p>\r\n      <button class=\"save-btn\" onclick=\"handleSaveBookmark(${story.id})\">Simpan</button>\r\n    </div>\r\n  `;\r\n}\r\n\r\nasync function handleSaveBookmark(storyId) {\r\n  const story = await getStoryById(storyId);  // Pastikan Anda memiliki logika untuk mengambil cerita berdasarkan ID\r\n  story.saved = true; // Tandai sebagai disimpan\r\n  await saveStoryToDB(story);  // Menyimpan cerita yang sudah disimpan\r\n  alert('Cerita berhasil disimpan!');\r\n}\r\n"],"names":["BASE_URL","getToken","localStorage","getItem","setToken","token","setItem","setUserName","name","async","email","password","res","fetch","method","headers","body","JSON","stringify","json","page","size","location","url","URL","searchParams","set","toString","Authorization","postStory","description","photoFile","lat","lon","formData","FormData","append","locationIcon","iconUrl","iconSize","iconAnchor","popupAnchor","mapInstance","markerClusterGroup","OBJECT_STORE_NAME","dbPromise","upgrade","db","objectStoreNames","contains","createObjectStore","keyPath","story","console","log","id","Date","now","put","getStoriesFromDB","stories","getAll","HomePresenter","constructor","container","this","init","loadAndRenderStories","innerHTML","length","renderStories","result","listStory","forEach","error","message","cards","map","photo","photoUrl","date","createdAt","toLocaleDateString","isSaved","saved","createStoryCard","join","onSaveBookmarkCallback","onDeleteStoryCallback","saveButtons","document","querySelectorAll","deleteButtons","btn","storyId","getAttribute","addEventListener","bindSaveButtonsAndDeleteButtons","handleSaveBookmark","bind","deleteStory","remove","setView","attribution","addTo","marker","icon","bindPopup","addLayer","initMapWithStories","querySelector","textContent","disabled","subscribed","navigator","registration","serviceWorker","getRegistration","pushManager","getSubscription","isCurrentPushSubscriptionAvailable","onclick","alert","subscription","unsubscribe","window","permission","Notification","requestPermission","subscribe","userVisibleOnly","applicationServerKey","err","find","st","delete","deleteStoryFromDB","home","presenter"],"sourceRoot":""}